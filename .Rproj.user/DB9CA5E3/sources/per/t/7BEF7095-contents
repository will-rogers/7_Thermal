---
title: "Scrubbing Data from PDF"
author: "Will Rogers"
date: "`r Sys.Date()`"
output: html_document
---

```{r}
require(tidyverse)
require(readr)
library(pdftools)
path <- "G:/Shared drives/KNP data & logistics/buffalo data/11Aug2023_buffalo_boma_project/1_Project Data/4_FLIR_data"
files <- list.files(path, recursive = T)
files.pdfs <- files[which(str_detect(files, ".pdf"))]

txt.files <- lapply(files.pdfs,  function(x) {pdftools::pdf_text(paste(path,x,sep = "/"))})

txt.files.flir <- lapply(txt.files,  function(x) {sum(str_detect(x, "FLIR")) > 0})

reports <- txt.files[which(unlist(txt.files.flir))]
reports.names <- files.pdfs[which(unlist(txt.files.flir))]



put.together <- rep(list(NA), length(reports))
j=4
for (j in 1:length(reports)) {
  rows<-scan(textConnection(reports[[j]]), 
           what="character", sep = "\n")
  
  pages <- str_split(rows[length(rows)],"/")[[1]][[2]]
  
  putative.ends <- which(str_detect(rows, regex(paste0("[0-9]/",pages))))
  
  dates <- which(str_detect(rows, regex(paste0("/[0-9][0-9]/",pages))))
  
  ends <- putative.ends[!putative.ends %in% dates]

  
  page.length <- diff(c(0,ends))
  # page.length[1] <- page.length[1] + 1
  page <- rep(1:length(page.length), times = page.length)
  
  individual.pages <- split(rows, page)
  
  for(k in 1:length(individual.pages)) {
    row <- lapply(individual.pages[[k]], function(x) {unlist(strsplit(x, " \\s+ "))})
  
    rows.with.photo <- lapply(row,  function(x) {sum(str_detect(x, ".jpg")) > 0})
    photo <- sapply(row[which(unlist(rows.with.photo))], function(x) {x[which(str_detect(x,".jpg"))]})
    photo. <- photo[!duplicated(photo)]
    
    rows.with.time <- lapply(row,  function(x) {sum(str_detect(x, regex("202[2-4]/[0-9][0-9]/[0-9][0-9]"))) > 0})
    times <- sapply(row[max(which(unlist(rows.with.time)))], function(x) {x[str_detect(x, regex("202[2-4]/[0-9][0-9]/[0-9][0-9]"))]})
    
    rows.with.meta.info <- lapply(row,  function(x) {sum(str_detect(x, "Note")) > 0})
    rows.with.meta.info <- which(unlist(rows.with.meta.info)) + 1
    
    if(length(rows.with.meta.info) == 0) {
      id <- Side <- Body.Part <- "Unknown - Please Specify"
    } else {
      meta.info <- sapply(row[rows.with.meta.info], function(x) {x[1]})
      ID <- str_split(meta.info," +", simplify = T)
      take <- apply(ID, 1, function(x) which(str_detect(x, "[G,Y,W,P][0-9]")))
      
      
      if(length(take) != 1) {
        id <- "Unknown - Please Specify" 
      } else {
        id <- rep(NA, length(take))
        for(i in 1:length(take)){
          take. <- min(take[[i]])
          if(take. == Inf) {
            id[i] <- NA
          } else id[i] <- ID[i,take.]
        }
      }
      
    
      # Body.Part <- tibble(x = unlist(meta.info)) %>% 
      #   mutate(ID.col = case_when(
      #     str_detect(x, fixed("g", ignore_case = T)) ~ "G",
      #     str_detect(x, fixed("y", ignore_case = T)) ~ "Y",
      #     str_detect(x, fixed("p", ignore_case = T)) ~ "P",
      #     str_detect(x, fixed("w", ignore_case = T)) ~ "W")) %>% 
      #   mutate(Body.Part = ifelse(is.na(Body.Part), "Unknown - Please Specify", Body.Part))
      
      Side <- ifelse(sapply(meta.info, function(x) {str_detect(x, fixed("left", ignore_case = T))}), "Left", NA)
      Side <- ifelse(sapply(meta.info, function(x) {str_detect(x, fixed("right", ignore_case = T))}), "Right", Side)
      Side <- ifelse(is.na(Side), "Unknown - Please Specify", Side)
      
      Body.Part <- tibble(x = unlist(meta.info)) %>% 
        mutate(Body.Part = case_when(
          str_detect(x, fixed("ner ear", ignore_case = T))  ~ "Inner Ear",
          str_detect(x, fixed("ter ear", ignore_case = T)) ~ "Outer Ear",
          str_detect(x, fixed("eye", ignore_case = T)) ~ "Eye",
          str_detect(x, fixed("flank", ignore_case = T)) ~ "Flank"))
      
      Body.Part <- ifelse(is.na(Body.Part$Body.Part), "Unknown - Please Specify", Body.Part$Body.Part)
    }
    
    rows.with.max <- lapply(row,  function(x) {sum(str_detect(x, "Max")) > 0})
    max <- sapply(row[which(unlist(rows.with.max))], function(x) {
      temps <- which(str_detect(x, regex("[0-9][0-9],")))
      x[temps[which(temps == which(str_detect(x, "Max")) + 1)]]})
    shape <- sapply(row[which(unlist(rows.with.max))], function(x) {x[which(str_detect(x, "Max")) - 1]})
    
    file <- 
      tibble(
        ID = id,
        Side = Side,
        Body.Part = Body.Part,
        Photo = photo.,
        Time = times,
        Page = k,
        Meta = meta.info,
        Shape = shape,
        Temp = max
      )
    
    if(k == 1) bound <- file
    if(k > 1) bound <- rbind(bound, file)
  }
  put.together[[j]] <- bound
  put.together[[j]]$report.file <- reports.names[j]
  put.together[[j]]$path <- path
  put.together[[j]]$date.retrieved <- Sys.Date()
}

require(data.table)
flir.data.entry <- rbindlist(put.together)

temp <- (flir.data.entry$Temp)

temp <- str_replace(temp, ",", ".")
temp <- str_split(temp, " ", simplify = T)
temp <- data.frame(temp)
temp[,1] <- as.numeric(temp[,1])
temp <- ifelse(str_detect(temp[,2], "F"), 
               (temp[,1] - 32) * 5/9,
               temp[,1])

flir.data.entry$temperature.in.c <- temp

flir.data.entry$Time <- as.POSIXct(flir.data.entry$Time, tx = "CEST")

flir.data.entry$Left.Side <- as.numeric(str_detect(flir.data.entry$Meta, fixed("left", ignore_case = T)))
flir.data.entry$Right.Side <- as.numeric(str_detect(flir.data.entry$Meta, fixed("right", ignore_case = T)))

flir.data.entry$Inner.Ear <- as.numeric(str_detect(flir.data.entry$Meta, fixed("ner ear", ignore_case = T)))
flir.data.entry$Outer.Ear <- as.numeric(str_detect(flir.data.entry$Meta, fixed("ter ear", ignore_case = T)))
flir.data.entry$Eye <- as.numeric(str_detect(flir.data.entry$Meta, fixed("eye", ignore_case = T)))
flir.data.entry$Flank <- as.numeric(str_detect(flir.data.entry$Meta, fixed("flank", ignore_case = T)))

flir.data.entry <- flir.data.entry %>%  
  mutate(Body.Part = ifelse(Inner.Ear + Outer.Ear + Eye + Flank > 1, "Unknown - Please Specify", Body.Part))

table(flir.data.entry$Body.Part)

write.csv(flir.data.entry, "FlirDataVerification.csv")
```




