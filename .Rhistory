Side <- ifelse(is.na(Side), "Unknown - Please Specify", Side)
Body.Part <- tibble(x = unlist(meta.info)) %>%
mutate(Body.Part = case_when(
str_detect(x, fixed("ner ear", ignore_case = T))  ~ "Inner Ear",
str_detect(x, fixed("ter ear", ignore_case = T))~ "Outer Ear",
str_detect(x, fixed("eye", ignore_case = T)) ~ "Eye",
str_detect(x, fixed("flank", ignore_case = T)) ~ "Flank"))
Body.Part <- ifelse(is.na(Body.Part$Body.Part), "Unknown - Please Specify", Body.Part$Body.Part)
}
rows.with.max <- lapply(row,  function(x) {sum(str_detect(x, "Max")) > 0})
max <- sapply(row[which(unlist(rows.with.max))], function(x) {x[which(which(str_detect(x, regex("[0-9][0-9],"))) > which(str_detect(x, "Max")))]})
shape <- sapply(row[which(unlist(rows.with.max))], function(x) {x[which(str_detect(x, "Max")) - 1]})
file <-
tibble(
ID = id,
Side = Side,
Body.Part = Body.Part,
Photo = photo.,
Time = times,
Page = k,
Meta = meta.info,
Shape = shape,
Temp = max
)
if(k == 1) bound <- file
if(k > 1) bound <- rbind(bound, file)
}
put.together[[j]] <- bound
put.together[[j]]$report.file <- reports.names[j]
put.together[[j]]$path <- path
put.together[[j]]$date.retrieved <- Sys.Date()
}
table(flir.data.entry$Temp)
flir.data.entry
k=10
j=4
rows<-scan(textConnection(reports[[j]]),
what="character", sep = "\n")
pages <- str_split(rows[length(rows)],"/")[[1]][[2]]
putative.ends <- which(str_detect(rows, regex(paste0("[0-9]/",pages))))
dates <- which(str_detect(rows, regex(paste0("/[0-9][0-9]/",pages))))
ends <- putative.ends[!putative.ends %in% dates]
page.length <- diff(c(0,ends))
# page.length[1] <- page.length[1] + 1
page <- rep(1:length(page.length), times = page.length)
individual.pages <- split(rows, page)
row <- lapply(individual.pages[[k]], function(x) {unlist(strsplit(x, " \\s+ "))})
rows.with.photo <- lapply(row,  function(x) {sum(str_detect(x, ".jpg")) > 0})
photo <- sapply(row[which(unlist(rows.with.photo))], function(x) {x[which(str_detect(x,".jpg"))]})
photo. <- photo[!duplicated(photo)]
rows.with.time <- lapply(row,  function(x) {sum(str_detect(x, "Measurements")) > 0})
times <- sapply(row[which(unlist(rows.with.time))], function(x) {x[2]})
rows.with.meta.info <- lapply(row,  function(x) {sum(str_detect(x, "Note")) > 0})
rows.with.meta.info <- which(unlist(rows.with.meta.info)) + 1
if(length(rows.with.meta.info) == 0) {
id <- Side <- Body.Part <- "Unknown - Please Specify"
} else {
meta.info <- sapply(row[rows.with.meta.info], function(x) {x[1]})
ID <- str_split(meta.info," +", simplify = T)
take <- apply(ID, 1, function(x) which(str_detect(x, "[G,Y,W,P][0-9]")))
if(length(take) != 1) {
id <- "Unknown - Please Specify"
} else {
id <- rep(NA, length(take))
for(i in 1:length(take)){
take. <- min(take[[i]])
if(take. == Inf) {
id[i] <- NA
} else id[i] <- ID[i,take.]
}
}
# Body.Part <- tibble(x = unlist(meta.info)) %>%
#   mutate(ID.col = case_when(
#     str_detect(x, fixed("g", ignore_case = T)) ~ "G",
#     str_detect(x, fixed("y", ignore_case = T)) ~ "Y",
#     str_detect(x, fixed("p", ignore_case = T)) ~ "P",
#     str_detect(x, fixed("w", ignore_case = T)) ~ "W")) %>%
#   mutate(Body.Part = ifelse(is.na(Body.Part), "Unknown - Please Specify", Body.Part))
Side <- ifelse(sapply(meta.info, function(x) {str_detect(x, fixed("left", ignore_case = T))}), "Left", NA)
Side <- ifelse(sapply(meta.info, function(x) {str_detect(x, fixed("right", ignore_case = T))}), "Right", Side)
Side <- ifelse(is.na(Side), "Unknown - Please Specify", Side)
Body.Part <- tibble(x = unlist(meta.info)) %>%
mutate(Body.Part = case_when(
str_detect(x, fixed("ner ear", ignore_case = T))  ~ "Inner Ear",
str_detect(x, fixed("ter ear", ignore_case = T))~ "Outer Ear",
str_detect(x, fixed("eye", ignore_case = T)) ~ "Eye",
str_detect(x, fixed("flank", ignore_case = T)) ~ "Flank"))
Body.Part <- ifelse(is.na(Body.Part$Body.Part), "Unknown - Please Specify", Body.Part$Body.Part)
}
rows.with.max <- lapply(row,  function(x) {sum(str_detect(x, "Max")) > 0})
max <- sapply(row[which(unlist(rows.with.max))], function(x) {x[which(which(str_detect(x, regex("[0-9][0-9],"))) > which(str_detect(x, "Max")))]})
shape <- sapply(row[which(unlist(rows.with.max))], function(x) {x[which(str_detect(x, "Max")) - 1]})
max
shape <- sapply(row[which(unlist(rows.with.max))], function(x) {x[which(str_detect(x, "Max")) - 1]})
shape
row
row[which(unlist(rows.with.max))]
x <- row[which(unlist(rows.with.max))][[1]]
x[which(which(str_detect(x, regex("[0-9][0-9],"))) > which(str_detect(x, "Max")))]
x <- row[which(unlist(rows.with.max))][[2]]
x[which(which(str_detect(x, regex("[0-9][0-9],"))) > which(str_detect(x, "Max")))]
which(str_detect(x, regex("[0-9][0-9],")))
which(str_detect(x, "Max"))
which(which(str_detect(x, regex("[0-9][0-9],"))) > which(str_detect(x, "Max")))
which(str_detect(x, regex("[0-9][0-9],"))) > which(str_detect(x, "Max"))
which(str_detect(x, regex("[0-9][0-9],"))) > which(str_detect(x, "Max"))
x <- row[which(unlist(rows.with.max))][[1]]
which(str_detect(x, regex("[0-9][0-9],"))) > which(str_detect(x, "Max"))
which(str_detect(x, regex("[0-9][0-9],")))
temps[which(temps > which(str_detect(x, "Max")))]
temps <- which(str_detect(x, regex("[0-9][0-9],")))
temps[which(temps > which(str_detect(x, "Max")))]
x[temps[which(temps > which(str_detect(x, "Max")))]]
flir.data.entry
sapply(row[which(unlist(rows.with.max))], function(x) {x[which(str_detect(x, "Max")) - 1]})
for (j in 1:length(reports)) {
rows<-scan(textConnection(reports[[j]]),
what="character", sep = "\n")
pages <- str_split(rows[length(rows)],"/")[[1]][[2]]
putative.ends <- which(str_detect(rows, regex(paste0("[0-9]/",pages))))
dates <- which(str_detect(rows, regex(paste0("/[0-9][0-9]/",pages))))
ends <- putative.ends[!putative.ends %in% dates]
page.length <- diff(c(0,ends))
# page.length[1] <- page.length[1] + 1
page <- rep(1:length(page.length), times = page.length)
individual.pages <- split(rows, page)
for(k in 1:length(individual.pages)) {
row <- lapply(individual.pages[[k]], function(x) {unlist(strsplit(x, " \\s+ "))})
rows.with.photo <- lapply(row,  function(x) {sum(str_detect(x, ".jpg")) > 0})
photo <- sapply(row[which(unlist(rows.with.photo))], function(x) {x[which(str_detect(x,".jpg"))]})
photo. <- photo[!duplicated(photo)]
rows.with.time <- lapply(row,  function(x) {sum(str_detect(x, "Measurements")) > 0})
times <- sapply(row[which(unlist(rows.with.time))], function(x) {x[2]})
rows.with.meta.info <- lapply(row,  function(x) {sum(str_detect(x, "Note")) > 0})
rows.with.meta.info <- which(unlist(rows.with.meta.info)) + 1
if(length(rows.with.meta.info) == 0) {
id <- Side <- Body.Part <- "Unknown - Please Specify"
} else {
meta.info <- sapply(row[rows.with.meta.info], function(x) {x[1]})
ID <- str_split(meta.info," +", simplify = T)
take <- apply(ID, 1, function(x) which(str_detect(x, "[G,Y,W,P][0-9]")))
if(length(take) != 1) {
id <- "Unknown - Please Specify"
} else {
id <- rep(NA, length(take))
for(i in 1:length(take)){
take. <- min(take[[i]])
if(take. == Inf) {
id[i] <- NA
} else id[i] <- ID[i,take.]
}
}
# Body.Part <- tibble(x = unlist(meta.info)) %>%
#   mutate(ID.col = case_when(
#     str_detect(x, fixed("g", ignore_case = T)) ~ "G",
#     str_detect(x, fixed("y", ignore_case = T)) ~ "Y",
#     str_detect(x, fixed("p", ignore_case = T)) ~ "P",
#     str_detect(x, fixed("w", ignore_case = T)) ~ "W")) %>%
#   mutate(Body.Part = ifelse(is.na(Body.Part), "Unknown - Please Specify", Body.Part))
Side <- ifelse(sapply(meta.info, function(x) {str_detect(x, fixed("left", ignore_case = T))}), "Left", NA)
Side <- ifelse(sapply(meta.info, function(x) {str_detect(x, fixed("right", ignore_case = T))}), "Right", Side)
Side <- ifelse(is.na(Side), "Unknown - Please Specify", Side)
Body.Part <- tibble(x = unlist(meta.info)) %>%
mutate(Body.Part = case_when(
str_detect(x, fixed("ner ear", ignore_case = T))  ~ "Inner Ear",
str_detect(x, fixed("ter ear", ignore_case = T))~ "Outer Ear",
str_detect(x, fixed("eye", ignore_case = T)) ~ "Eye",
str_detect(x, fixed("flank", ignore_case = T)) ~ "Flank"))
Body.Part <- ifelse(is.na(Body.Part$Body.Part), "Unknown - Please Specify", Body.Part$Body.Part)
}
rows.with.max <- lapply(row,  function(x) {sum(str_detect(x, "Max")) > 0})
max <- sapply(row[which(unlist(rows.with.max))], function(x) {
temps <- which(str_detect(x, regex("[0-9][0-9],")))
x[temps[which(temps > which(str_detect(x, "Max")))]]})
shape <- sapply(row[which(unlist(rows.with.max))], function(x) {x[which(str_detect(x, "Max")) - 1]})
file <-
tibble(
ID = id,
Side = Side,
Body.Part = Body.Part,
Photo = photo.,
Time = times,
Page = k,
Meta = meta.info,
Shape = shape,
Temp = max
)
if(k == 1) bound <- file
if(k > 1) bound <- rbind(bound, file)
}
put.together[[j]] <- bound
put.together[[j]]$report.file <- reports.names[j]
put.together[[j]]$path <- path
put.together[[j]]$date.retrieved <- Sys.Date()
}
require(data.table)
flir.data.entry <- rbindlist(put.together)
table(flir.data.entry$Shape)
table(flir.data.entry$Temp)
flir.data.entry
for (j in 1:length(reports)) {
rows<-scan(textConnection(reports[[j]]),
what="character", sep = "\n")
pages <- str_split(rows[length(rows)],"/")[[1]][[2]]
putative.ends <- which(str_detect(rows, regex(paste0("[0-9]/",pages))))
dates <- which(str_detect(rows, regex(paste0("/[0-9][0-9]/",pages))))
ends <- putative.ends[!putative.ends %in% dates]
page.length <- diff(c(0,ends))
# page.length[1] <- page.length[1] + 1
page <- rep(1:length(page.length), times = page.length)
individual.pages <- split(rows, page)
for(k in 1:length(individual.pages)) {
row <- lapply(individual.pages[[k]], function(x) {unlist(strsplit(x, " \\s+ "))})
rows.with.photo <- lapply(row,  function(x) {sum(str_detect(x, ".jpg")) > 0})
photo <- sapply(row[which(unlist(rows.with.photo))], function(x) {x[which(str_detect(x,".jpg"))]})
photo. <- photo[!duplicated(photo)]
rows.with.time <- lapply(row,  function(x) {sum(str_detect(x, "Measurements")) > 0})
times <- sapply(row[which(unlist(rows.with.time))], function(x) {x[2]})
rows.with.meta.info <- lapply(row,  function(x) {sum(str_detect(x, "Note")) > 0})
rows.with.meta.info <- which(unlist(rows.with.meta.info)) + 1
if(length(rows.with.meta.info) == 0) {
id <- Side <- Body.Part <- "Unknown - Please Specify"
} else {
meta.info <- sapply(row[rows.with.meta.info], function(x) {x[1]})
ID <- str_split(meta.info," +", simplify = T)
take <- apply(ID, 1, function(x) which(str_detect(x, "[G,Y,W,P][0-9]")))
if(length(take) != 1) {
id <- "Unknown - Please Specify"
} else {
id <- rep(NA, length(take))
for(i in 1:length(take)){
take. <- min(take[[i]])
if(take. == Inf) {
id[i] <- NA
} else id[i] <- ID[i,take.]
}
}
# Body.Part <- tibble(x = unlist(meta.info)) %>%
#   mutate(ID.col = case_when(
#     str_detect(x, fixed("g", ignore_case = T)) ~ "G",
#     str_detect(x, fixed("y", ignore_case = T)) ~ "Y",
#     str_detect(x, fixed("p", ignore_case = T)) ~ "P",
#     str_detect(x, fixed("w", ignore_case = T)) ~ "W")) %>%
#   mutate(Body.Part = ifelse(is.na(Body.Part), "Unknown - Please Specify", Body.Part))
Side <- ifelse(sapply(meta.info, function(x) {str_detect(x, fixed("left", ignore_case = T))}), "Left", NA)
Side <- ifelse(sapply(meta.info, function(x) {str_detect(x, fixed("right", ignore_case = T))}), "Right", Side)
Side <- ifelse(is.na(Side), "Unknown - Please Specify", Side)
Body.Part <- tibble(x = unlist(meta.info)) %>%
mutate(Body.Part = case_when(
str_detect(x, fixed("ner ear", ignore_case = T))  ~ "Inner Ear",
str_detect(x, fixed("ter ear", ignore_case = T))~ "Outer Ear",
str_detect(x, fixed("eye", ignore_case = T)) ~ "Eye",
str_detect(x, fixed("flank", ignore_case = T)) ~ "Flank"))
Body.Part <- ifelse(is.na(Body.Part$Body.Part), "Unknown - Please Specify", Body.Part$Body.Part)
}
rows.with.max <- lapply(row,  function(x) {sum(str_detect(x, "Max")) > 0})
max <- sapply(row[which(unlist(rows.with.max))], function(x) {
temps <- which(str_detect(x, regex("[0-9][0-9],")))
x[temps[which(temps == which(str_detect(x, "Max")) + 1)]]})
shape <- sapply(row[which(unlist(rows.with.max))], function(x) {x[which(str_detect(x, "Max")) - 1]})
file <-
tibble(
ID = id,
Side = Side,
Body.Part = Body.Part,
Photo = photo.,
Time = times,
Page = k,
Meta = meta.info,
Shape = shape,
Temp = max
)
if(k == 1) bound <- file
if(k > 1) bound <- rbind(bound, file)
}
put.together[[j]] <- bound
put.together[[j]]$report.file <- reports.names[j]
put.together[[j]]$path <- path
put.together[[j]]$date.retrieved <- Sys.Date()
}
require(data.table)
flir.data.entry <- rbindlist(put.together)
table(flir.data.entry$Temp)
temp <- (flir.data.entry$Temp)
str_replace(temp, ",", ".")
temp <- str_replace(temp, ",", ".")
temp <- str_split(temp, "+", simplify = T)
temp <- str_split(temp, "_", simplify = T)
temp
temp <- str_split(temp, "\\_", simplify = T)
temp
temp <- str_split(temp, " ", simplify = T)
temp
temp <- data.frame(temp)
temp[,1] <- as.numeric(temp)
temp[,1] <- as.numeric(temp[,1])
temp
flir.data.entry$Temp
temp <- (flir.data.entry$Temp)
temp <- str_replace(temp, ",", ".")
temp <- str_split(temp, " ", simplify = T)
temp <- data.frame(temp)
temp[,1] <- as.numeric(temp[,1])
temp <- ifelse(str_detect(temp[,2], "F"),
(temp[,1] - 32) * 5/9,
temp[,1])
temp
flir.data.entry$temperature.in.c <- temp
flir.data.entry$Time
str_detect(flir.data.entry$Time, "El1")
table(str_detect(flir.data.entry$Time, "El1"))
str_remove(flir.data.entry$Time, " El1")
flir.data.entry$Time
row
sapply(row[which(unlist(rows.with.photo))], function(x) {x[which(str_detect(x,".jpg"))]})
rows.with.time <- lapply(row,  function(x) {sum(str_detect(x, regex("202[2-4]/[0-9][0-9]/[0-9][0-9]"))) > 0})
rows.with.time
which(unlist(rows.with.time))
sapply(row[max(which(unlist(rows.with.time)))], function(x) {x[str_detect(x, regex("202[2-4]/[0-9][0-9]/[0-9][0-9]"))]})
for (j in 1:length(reports)) {
rows<-scan(textConnection(reports[[j]]),
what="character", sep = "\n")
pages <- str_split(rows[length(rows)],"/")[[1]][[2]]
putative.ends <- which(str_detect(rows, regex(paste0("[0-9]/",pages))))
dates <- which(str_detect(rows, regex(paste0("/[0-9][0-9]/",pages))))
ends <- putative.ends[!putative.ends %in% dates]
page.length <- diff(c(0,ends))
# page.length[1] <- page.length[1] + 1
page <- rep(1:length(page.length), times = page.length)
individual.pages <- split(rows, page)
for(k in 1:length(individual.pages)) {
row <- lapply(individual.pages[[k]], function(x) {unlist(strsplit(x, " \\s+ "))})
rows.with.photo <- lapply(row,  function(x) {sum(str_detect(x, ".jpg")) > 0})
photo <- sapply(row[which(unlist(rows.with.photo))], function(x) {x[which(str_detect(x,".jpg"))]})
photo. <- photo[!duplicated(photo)]
rows.with.time <- lapply(row,  function(x) {sum(str_detect(x, regex("202[2-4]/[0-9][0-9]/[0-9][0-9]"))) > 0})
times <- sapply(row[max(which(unlist(rows.with.time)))], function(x) {x[str_detect(x, regex("202[2-4]/[0-9][0-9]/[0-9][0-9]"))]})
rows.with.meta.info <- lapply(row,  function(x) {sum(str_detect(x, "Note")) > 0})
rows.with.meta.info <- which(unlist(rows.with.meta.info)) + 1
if(length(rows.with.meta.info) == 0) {
id <- Side <- Body.Part <- "Unknown - Please Specify"
} else {
meta.info <- sapply(row[rows.with.meta.info], function(x) {x[1]})
ID <- str_split(meta.info," +", simplify = T)
take <- apply(ID, 1, function(x) which(str_detect(x, "[G,Y,W,P][0-9]")))
if(length(take) != 1) {
id <- "Unknown - Please Specify"
} else {
id <- rep(NA, length(take))
for(i in 1:length(take)){
take. <- min(take[[i]])
if(take. == Inf) {
id[i] <- NA
} else id[i] <- ID[i,take.]
}
}
# Body.Part <- tibble(x = unlist(meta.info)) %>%
#   mutate(ID.col = case_when(
#     str_detect(x, fixed("g", ignore_case = T)) ~ "G",
#     str_detect(x, fixed("y", ignore_case = T)) ~ "Y",
#     str_detect(x, fixed("p", ignore_case = T)) ~ "P",
#     str_detect(x, fixed("w", ignore_case = T)) ~ "W")) %>%
#   mutate(Body.Part = ifelse(is.na(Body.Part), "Unknown - Please Specify", Body.Part))
Side <- ifelse(sapply(meta.info, function(x) {str_detect(x, fixed("left", ignore_case = T))}), "Left", NA)
Side <- ifelse(sapply(meta.info, function(x) {str_detect(x, fixed("right", ignore_case = T))}), "Right", Side)
Side <- ifelse(is.na(Side), "Unknown - Please Specify", Side)
Body.Part <- tibble(x = unlist(meta.info)) %>%
mutate(Body.Part = case_when(
str_detect(x, fixed("ner ear", ignore_case = T))  ~ "Inner Ear",
str_detect(x, fixed("ter ear", ignore_case = T))~ "Outer Ear",
str_detect(x, fixed("eye", ignore_case = T)) ~ "Eye",
str_detect(x, fixed("flank", ignore_case = T)) ~ "Flank"))
Body.Part <- ifelse(is.na(Body.Part$Body.Part), "Unknown - Please Specify", Body.Part$Body.Part)
}
rows.with.max <- lapply(row,  function(x) {sum(str_detect(x, "Max")) > 0})
max <- sapply(row[which(unlist(rows.with.max))], function(x) {
temps <- which(str_detect(x, regex("[0-9][0-9],")))
x[temps[which(temps == which(str_detect(x, "Max")) + 1)]]})
shape <- sapply(row[which(unlist(rows.with.max))], function(x) {x[which(str_detect(x, "Max")) - 1]})
file <-
tibble(
ID = id,
Side = Side,
Body.Part = Body.Part,
Photo = photo.,
Time = times,
Page = k,
Meta = meta.info,
Shape = shape,
Temp = max
)
if(k == 1) bound <- file
if(k > 1) bound <- rbind(bound, file)
}
put.together[[j]] <- bound
put.together[[j]]$report.file <- reports.names[j]
put.together[[j]]$path <- path
put.together[[j]]$date.retrieved <- Sys.Date()
}
flir.data.entry
flir.data.entry <- rbindlist(put.together)
as.POSIXct(flir.data.entry$Time)
flir.data.entry$Time <- as.POSIXct(flir.data.entry$Time, tx = "CEST")
require(ggplot2)
flir.data.entry <- rbindlist(put.together)
temp <- (flir.data.entry$Temp)
temp <- str_replace(temp, ",", ".")
temp <- str_split(temp, " ", simplify = T)
temp <- data.frame(temp)
temp[,1] <- as.numeric(temp[,1])
temp <- ifelse(str_detect(temp[,2], "F"),
(temp[,1] - 32) * 5/9,
temp[,1])
flir.data.entry$temperature.in.c <- temp
flir.data.entry$Time <- as.POSIXct(flir.data.entry$Time, tx = "CEST")
flir.data.entry %>%
ggplot(aes(x = Time, y = temperature.in.c, color = ID)) +
geom_path() +
facet_grid(Body.Part~Side)
flir.data.entry %>%
ggplot(aes(x = Time, y = temperature.in.c, color = ID)) +
geom_point() +
facet_grid(Body.Part~Side)
flir.data.entry
str_detect(flir.data.entry$Meta, fixed("left", ignore_case = T))
Left.Side <- as.numeric(str_detect(flir.data.entry$Meta, fixed("left", ignore_case = T)))
Right.Side <- as.numeric(str_detect(flir.data.entry$Meta, fixed("right", ignore_case = T)))
table(Left.Side, Right.Side)
Inner.Ear <- as.numeric(str_detect(flir.data.entry$Meta, fixed("ner ear", ignore_case = T)))
Outer.Ear <- as.numeric(str_detect(flir.data.entry$Meta, fixed("ter ear", ignore_case = T)))
Eye <- as.numeric(str_detect(flir.data.entry$Meta, fixed("eye", ignore_case = T)))
Flank <- as.numeric(str_detect(flir.data.entry$Meta, fixed("flank", ignore_case = T)))
table(Left.Side,Right.Side)
table(Inner.Ear,Outer.Ear)
table(Inner.Ear,Outer.Ear)
table(Inner.Ear,Eye)
table(Inner.Ear,Flank)
table(Outer.Ear,Eye)
table(Outer.Ear,Flank)
table(Eye,Flank)
flir.data.entry$Body.Part <- ifelse(sum(Inner.Ear,Outer.Ear,Eye,Flank) > 1, "Unknown - Please Specify", flir.data.entry$Body.Part)
flir.data.entry <- rbindlist(put.together)
temp <- (flir.data.entry$Temp)
temp <- str_replace(temp, ",", ".")
temp <- str_split(temp, " ", simplify = T)
temp <- data.frame(temp)
temp[,1] <- as.numeric(temp[,1])
temp <- ifelse(str_detect(temp[,2], "F"),
(temp[,1] - 32) * 5/9,
temp[,1])
flir.data.entry$temperature.in.c <- temp
flir.data.entry$Time <- as.POSIXct(flir.data.entry$Time, tx = "CEST")
flir.data.entry$Left.Side <- as.numeric(str_detect(flir.data.entry$Meta, fixed("left", ignore_case = T)))
flir.data.entry$Right.Side <- as.numeric(str_detect(flir.data.entry$Meta, fixed("right", ignore_case = T)))
flir.data.entry$Inner.Ear <- as.numeric(str_detect(flir.data.entry$Meta, fixed("ner ear", ignore_case = T)))
flir.data.entry$Outer.Ear <- as.numeric(str_detect(flir.data.entry$Meta, fixed("ter ear", ignore_case = T)))
flir.data.entry$Eye <- as.numeric(str_detect(flir.data.entry$Meta, fixed("eye", ignore_case = T)))
flir.data.entry$Flank <- as.numeric(str_detect(flir.data.entry$Meta, fixed("flank", ignore_case = T)))
flir.data.entry$Body.Part <- ifelse(sum(flir.data.entry$Inner.Ear,flir.data.entry$Outer.Ear,flir.data.entry$Eye,flir.data.entry$Flank) > 1, "Unknown - Please Specify", flir.data.entry$Body.Part)
flir.data.entry <- rbindlist(put.together)
temp <- (flir.data.entry$Temp)
temp <- str_replace(temp, ",", ".")
temp <- str_split(temp, " ", simplify = T)
temp <- data.frame(temp)
temp[,1] <- as.numeric(temp[,1])
temp <- ifelse(str_detect(temp[,2], "F"),
(temp[,1] - 32) * 5/9,
temp[,1])
flir.data.entry$temperature.in.c <- temp
flir.data.entry$Time <- as.POSIXct(flir.data.entry$Time, tx = "CEST")
flir.data.entry$Left.Side <- as.numeric(str_detect(flir.data.entry$Meta, fixed("left", ignore_case = T)))
flir.data.entry$Right.Side <- as.numeric(str_detect(flir.data.entry$Meta, fixed("right", ignore_case = T)))
flir.data.entry$Inner.Ear <- as.numeric(str_detect(flir.data.entry$Meta, fixed("ner ear", ignore_case = T)))
flir.data.entry$Outer.Ear <- as.numeric(str_detect(flir.data.entry$Meta, fixed("ter ear", ignore_case = T)))
flir.data.entry$Eye <- as.numeric(str_detect(flir.data.entry$Meta, fixed("eye", ignore_case = T)))
flir.data.entry$Flank <- as.numeric(str_detect(flir.data.entry$Meta, fixed("flank", ignore_case = T)))
table(flir.data.entry)
table(flir.data.entry$Body.Part)
flir.data.entry$Body.Part <- ifelse(sum(flir.data.entry$Inner.Ear,flir.data.entry$Outer.Ear,flir.data.entry$Eye,flir.data.entry$Flank) > 1, "Unknown - Please Specify", flir.data.entry$Body.Part)
table(flir.data.entry$Body.Part)
mutate(Body.Part = ifelse(Inner.Ear + Outer.Ear + Eye + Flank > 1, "Unknown - Please Specify", flir.data.entry$Body.Part)
)
flir.data.entry$Body.Part <- flir.data.entry %>%
mutate(Body.Part = ifelse(Inner.Ear + Outer.Ear + Eye + Flank > 1, "Unknown - Please Specify", flir.data.entry$Body.Part))
flir.data.entry$Body.Part <- flir.data.entry %>%
mutate(Body.Part = ifelse(Inner.Ear + Outer.Ear + Eye + Flank > 1, "Unknown - Please Specify", Body.Part))
flir.data.entry <- flir.data.entry %>%
mutate(Body.Part = ifelse(Inner.Ear + Outer.Ear + Eye + Flank > 1, "Unknown - Please Specify", Body.Part))
flir.data.entry
require(data.table)
flir.data.entry <- rbindlist(put.together)
temp <- (flir.data.entry$Temp)
temp <- str_replace(temp, ",", ".")
temp <- str_split(temp, " ", simplify = T)
temp <- data.frame(temp)
temp[,1] <- as.numeric(temp[,1])
temp <- ifelse(str_detect(temp[,2], "F"),
(temp[,1] - 32) * 5/9,
temp[,1])
flir.data.entry$temperature.in.c <- temp
flir.data.entry$Time <- as.POSIXct(flir.data.entry$Time, tx = "CEST")
flir.data.entry$Left.Side <- as.numeric(str_detect(flir.data.entry$Meta, fixed("left", ignore_case = T)))
flir.data.entry$Right.Side <- as.numeric(str_detect(flir.data.entry$Meta, fixed("right", ignore_case = T)))
flir.data.entry$Inner.Ear <- as.numeric(str_detect(flir.data.entry$Meta, fixed("ner ear", ignore_case = T)))
flir.data.entry$Outer.Ear <- as.numeric(str_detect(flir.data.entry$Meta, fixed("ter ear", ignore_case = T)))
flir.data.entry$Eye <- as.numeric(str_detect(flir.data.entry$Meta, fixed("eye", ignore_case = T)))
flir.data.entry$Flank <- as.numeric(str_detect(flir.data.entry$Meta, fixed("flank", ignore_case = T)))
flir.data.entry <- flir.data.entry %>%
mutate(Body.Part = ifelse(Inner.Ear + Outer.Ear + Eye + Flank > 1, "Unknown - Please Specify", Body.Part))
table(flir.data.entry$Body.Part)
?write.csv(flir.data.entry)
write.csv(flir.data.entry, "FlirDataVerification.csv")
